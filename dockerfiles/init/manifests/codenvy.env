############################################################
#####                                                  #####
#####                  CODENVY SYSTEM                  #####
#####                                                  #####
#
# Fundamental parameters that affect system operation.
#

# IP address, hostname, or DNS
#     The IP address or DNS name of where the Codenvy endpoint will service your users.
#     If you are running this on a local system, we auto-detect this value as the IP
#     address of your Docker daemon. On many systems, especially those from cloud hosters
#     like DigitalOcean, you must explicitly set this to the external IP address or
#     DNS entry provided by the provider.
#CODENVY_HOST=codenvy.onprem

# Administrator
#     The initial configuration of the admin system user. You can use LDAP to change
#     the administrative password. The email is required to receive product notifications.
#CODENVY_ADMIN_NAME=admin
#CODENVY_ADMIN_INITIAL_PASSWORD=password
#CODENVY_ADMIN_EMAIL=admin@codenvy.com

# HTTP/S and SSL
#     Set the host protocol used for communication to either `http` or `https`. If you set
#     the value to `https` then you can provide a path to an SSL certificate or additional
#     SSL configuration parameters. Codenvy is set to `http` as its default.
#CODENVY_HOST_PROTOCOL=http
#CODENVY_PATH_TO_HAPROXY_SSL_CERTIFICATE=/etc/codenvy_dev_cert.pem
#CODENVY_HAPROXY_HTTPS_CONFIG=no-sslv3 no-tls-tickets ciphers ALL:-ADH:+HIGH:+MEDIUM:-LOW:-SSLv2:-EXP:!RC4:!AECDH

# User Self-Service Account Creation
#     If `true`, then users are allowed to create their own accounts through the
#     initial entrypoint screens provided by Codenvy. It is similar to the self-service
#     signup that exists at http://codenvy.com. If `false`, only the admin is permitted
#     to create new accounts.
#CODENVY_USER_SELF_CREATION_ALLOWED=true

# Proxies
#     Codenvy's internal system services such as HAProxy and its internal JVMs need to
#     have system level properties applied so that they can reach the Internet. Codenvy's
#     system uses the Internet to communicate with DockerHub for downloading images that
#     are used to run Codenvy's systems. Note that you must configure proxy access in three
#     locations. First, you enabled your system Docker daemon to use proxies. Second, you
#     configure proxies for Codenvy's internal system services. Third, if you want your users
#     to access the Internet, then you should also add proxy values for their workspaces.
#
#     Please be mindful of the proxy URL formatting. Proxies are unforgiving if you do not type
#     the URL just right, inclduing the protocol and whether they allow a trailing /.
#CODENVY_HTTP_PROXY_FOR_CODENVY=http://myproxy.com:8001/
#CODENVY_HTTPS_PROXY_FOR_CODENVY=http://myproxy.com:8001/
#CODENVY_NO_PROXY_FOR_CODENVY=<ip-or-domains-that-do-not-require-proxy-access>

# Proxies for Workspaces
#     The proxy values that will be set as environment variables within each user's workspace.
#     Set these to allow users Internet access if they are behind a proxy.
#CODENVY_HTTP_PROXY_FOR_CODENVY_WORKSPACES=http://myproxy.com:8001/
#CODENVY_HTTPS_PROXY_FOR_CODENVY_WORKSPACES=http://myproxy.com:8001/
#CODENVY_NO_PROXY_FOR_CODENVY_WORKSPACES=<ip-or-domains-that-do-not-require-proxy-access>

# JPDA
#     If using Codenvy in development mode where you mount a custom assembly, activate
#     this property to enable JPDA mode within Codenvy's internal Tomcat
#CODENVY_DEBUG_SUSPEND=false
#CODENVY_DEBUG_PORT=8000

# XMX
#      Codenvy's core server runs as a Tomcat application on top of a JVM. This sets the
#      JVM XMX settings that are loaded by the JVM when the Codenvy container boots.
#      It should be rare that you would need to change this.
#CODENVY_SERVER_XMX=2048


############################################################
#####                                                  #####
#####                WORKSPACE LIMITS                  #####
#####                                                  #####
#
# Workspaces are the fundamental runtime for users when doing development. You can set
# parameters that limit how workspaces are created and the resources that are consumed.
#
#     The maximum number of workspaces that a user is allowed to create. The user will
#     be presented with an error message if they try to create additional workspaces.
#     This applies to the total number of both running and stopped workspaces. Since
#     each workspace is saved as a snapshot, placing a cap on this number is a way
#     to limit the disk consumption for workspace storage.
#CODENVY_LIMITS_USER_WORKSPACES_COUNT=30

#     The maximum number of running workspaces that a single user is allowed to have.
#     If the user has reached this threshold and they try to start an additional workspace,
#     they will be prompted with an error message. The user will need to stop a running
#     workspace to activate another.
#CODENVY_LIMITS_USER_WORKSPACES_RUN_COUNT=10

#     The total amount of RAM that a single user is allowed to allocate to running
#     workspaces. A user can allocate this RAM to a single workspace or spread it across
#     multiple workspaces.
#CODENVY_LIMITS_USER_WORKSPACES_RAM=100gb

#     The total amount of RAM that a single organization (team) is allowed to allocate
#     to running workspaces. An organization owner can allocate this RAM however they
#     see fit across the team's workspaces.
#CODENVY_LIMITS_ORGANIZATION_WORKSPACES_RAM=100gb

#     The maximum number of workspaces that a organization is allowed to own. The organization will
#     be presented with an error message if they try to create additional workspaces.
#     This applies to the total number of both running and stopped workspaces. Since
#     each workspace is saved as a snapshot, placing a cap on this number is a way
#     to limit the disk consumption for workspace storage.
#CODENVY_LIMITS_ORGANIZATION_WORKSPACES_COUNT=30

#     The maximum number of running workspaces that a single organization is allowed to have.
#     If the organization has reached this threshold and they try to start an additional workspace,
#     they will be prompted with an error message. The organization will need to stop a running
#     workspace to activate another.
#CODENVY_LIMITS_ORGANIZATION_WORKSPACES_RUN_COUNT=10

#     The maximum amount of RAM that a user can allocate to a workspace when they create
#     a new workspace. The RAM slider is adjusted to this maximum value.
#CODENVY_LIMITS_WORKSPACE_ENV_RAM=16gb


############################################################
#####                                                  #####
#####             WORKSPACE CONFIGURATION              #####
#####                                                  #####
#
# User workspaces have their own runtimes. Those runtimes can be composed of one or more containers.
# We call each container a 'machine' as it is a dedicated runtime. One of the machines for a
# workspace must be designated as the 'development' machine, which installs Codenvy agents to
# provide additional services to the user. These parameters configure how Codenvy manages user
# machines and the agents that are deployed within them.
#
# Since workspaces have their own runtimes, they have separate proxies that do not inherit from
# the system proxies that you have configured for your Docker daemon.
#
# /etc/hosts for Workspaces
#     This will add entries into the user's /etc/hosts file that is running within their workspace.
#     You may need to configure this file to give the user access to systems within your network
#     or access to the Internet.
#CODENVY_MACHINE_EXTRA_HOSTS=NULL

# Idle Timeout
#     The length of time that a user is idle with their workspace when the system will suspend the
#     workspace by snapshotting it and then stopping it. Idleness is determined by the length of
#     time that the user has not interacted with the workspace, meaning that one of our agents
#     has not received instructions. Leaving a browser window open counts as idleness time.
#     Default = 14,400,000 MS (4 hours)
#CODENVY_MACHINE_WS_AGENT_INACTIVE_STOP_TIMEOUT_MS=14400000

# Memory
#     The recommended RAM size that users will see for their workspace when they create new
#     workspaces in the user dashboard.
#CODENVY_MACHINE_DEFAULT_MEM_SIZE_MB=1024

# Memory Swap
#     Adjust machine swap memory by multiplication current machnine memory on provided value.
#     default is 0 which means disabled swap, if set multiplier value equal to 0.5
#     machine swap will be configured with size that equal to half of current machine memory.
#     It should be rare that you would configure this. See Docker memory swap online
#     for background.
#CODENVY_MACHINE_DOCKER_MEMORY_SWAP_MULTIPLIER=0

# CPU Core Limits
#     Limit the CPU cores used for running Codenvy workspaces as containers.
#     Example:
#         CODENVY_DOCKER_CPUSET_CPUS=0-3
#         CODENVY_DOCKER_CPUSET_CPUS=0,2
#     See more at https://docs.docker.com/engine/reference/run/#/cpuset-constraint
#CODENVY_DOCKER_CPUSET_CPUS=NULL

# CPU Consumption Limit
#     Limit the CPU utilitization given to containers powering workspaces started
#     by Che. 'period' sets the amount of units for each CPU core. 'quota' sets the
#     sets amount of units available per whole CPU.
#     Max value of quota could be period * number of CPU cores in a system.
#     Example:
#         These values allows usage of 100% of 2 cores on 2+ cores system.
#         Period declares that 100% is equal to 5000 units
#         and container is allowed to use 2x more than 1 core.
#         Although max consumption is explained in cores performance workload will be
#         split between several cores.
#         CODENVY_DOCKER_CPU_PERIOD=5000
#         CODENVY_DOCKER_CPU_QUOTA=10000
#         In this example limit is set to half of a CPU core.
#         CODENVY_DOCKER_CPU_PERIOD=10000
#         CODENVY_DOCKER_CPU_QUOTA=5000
#    See more at https://docs.docker.com/engine/reference/run/#/cpu-period-constraint
#                https://docs.docker.com/engine/reference/run/#/cpu-quota-constraint
#CODENVY_DOCKER_CPU_PERIOD=0
#CODENVY_DOCKER_CPU_QUOTA=0

# CGroup Parent
#     CGroups allow admins to to configure limits on nodes in a system in a specific
#     way. The value can start with a slash which means it will be absolute or
#     without a slash for relative value. Docker will create this cgroup if it is missing.
#     Admin can configure limits on this cgroup on all nodes in a system specific way.
#     Example:
#         On Ubuntu 16.04 use CODENVY_DOCKER_PARENT_CGROUP=/my_group. Then let container
#         create cgoup by running Codenvy. Then edit
#         /sys/fs/cgroup/<resource folder>/my_group/<resource file>
#         For example to limit CPU cores to 0-1 put value "0-1" into file
#         /sys/fs/cgroup/cpuset/my_group/cpuset.cpus
#     See more at https://docs.docker.com/engine/reference/run/#/specifying-custom-cgroups
#CODENVY_DOCKER_PARENT_CGROUP=NULL

# Host Volume Mounts
#     Semicolon separated list of volume mounts. If this is provided, Codenvy will volume mount
#     those host folders into each workspace generated by your users. This is a way to allow
#     you to provide access to network attached storage that is shared across many workspaces.
#CODENVY_MACHINE_SERVER_EXTRA_VOLUME=/path/on/host:/path/in/workspace:ro,Z;/path/to/host2:/path/in/workspace2:ro,Z;

# Privilged Mode
#     Set to `true` if you would like user workspaces to be started with Docker's privileged mode.
#     Please be careful when setting this property. This allows user workspaces to gain access to
#     the underly host with root privileges. However, privileged mode is needed if users want to
#     launch their own Docker containers from within their Docker-powered workspace.
#CODENVY_MACHINE_DOCKER_PRIVILEGED=false

# Agent Start Timeout
#     The length of time that a workspace will be allowed to boot before the system terminates the
#     boot process. If the Codenvy container cannot establish two way communications with the
#     agents within the workspace when it boots, then the workspace will not be started.
#CODENVY_MACHINE_WS_AGENT_MAX_START_TIME_MS=300000

# Agent Run Command
#     Used internally by Codenvy to specify how the Codenvy system starts our agents within a
#     workspace during its boot process. You should not need to modify this.
#CODENVY_MACHINE_WS_AGENT_RUN_COMMAND=~/che/ws-agent/bin/catalina.sh run

# Docker Network Driver
#     Enables networking between machines.
#     The overlay network driver require special docker engine configuration with KV storage,
#     make sure your docker engines are properly configured with external KV storage before enable this.
#     More info: https://docs.docker.com/engine/userguide/networking/get-started-overlay/
#     By default this is set to "bridge".
#CODENVY_MACHINE_DOCKER_NETWORK_DRIVER=overlay

# Workspace Snapshots
#     By default, when a workspace is stopped, we snapshot its state, create a Docker image 
#     of it, and then save that image in a private Docker registry that is started when
#     Codenvy starts. Codenvy's built-in registry  is not secure and only works 
#     if your Docker daemon is configured to work with insecure registries, which it typically
#     is. More info: https://docs.docker.com/registry/insecure/
#
#     You can replace Codenvy's internal insecure registry with your own, such as JFrog
#     Artifactor or Docker Enterprise Registry.
#CODENVY_DOCKER_REGISTRY_FOR_WORKSPACE_SNAPSHOTS=<your_private_registry_url>:<port>
#
#     You can change whether snapshots happen automatically when users stop their workspace.
#CODENVY_WORKSPACE_AUTO_SNAPSHOT=true
#
#     If a snapshot exists, workspace will start form the snapshot using the snapshot image.
#     If false, then the workspace will always start from the base stack image, instead.
#CODENVY_WORKSPACE_AUTO_RESTORE=true

# Private Images
#      If your stacks need to pull images that are private, which require authenticated
#      access by the Docker client. Or, if you have Codenvy configured to save workspace
#      snapshots to a private registry that requires authentication before an image can
#      be pushed, then you need to add that registry's authentication credentials.
#
#      Once these registries are configured, you can create stacks that use recipes
#      with Dockerfiles that reference private images using the
#      'FROM <your-registry>/<your-repo> syntax.
#
#      We have separate configurations for AWS EC2 vs. a Docker registry. You can add
#      as many registries for authentication as necessary by appending REGISTRY[n] ID to
#      each entry.
#       Example:
#            CODENVY_DOCKER_REGISTRY_AUTH_REGISTRY2_URL=url2
#            CODENVY_DOCKER_REGISTRY_AUTH_REGISTRY2_USERNAME=username2
#            CODENVY_DOCKER_REGISTRY_AUTH_REGISTRY2_PASSWORD=password2
#
#CODENVY_DOCKER_REGISTRY_AUTH_REGISTRY1_URL=url1
#CODENVY_DOCKER_REGISTRY_AUTH_REGISTRY1_USERNAME=username1
#CODENVY_DOCKER_REGISTRY_AUTH_REGISTRY1_PASSWORD=password1
#
#CODENVY_DOCKER_REGISTRY_AWS_REGISTRY1_ID=id1
#CODENVY_DOCKER_REGISTRY_AWS_REGISTRY1_REGION=region1
#CODENVY_DOCKER_REGISTRY_AWS_REGISTRY1_ACCESS__KEY__ID=key_id1
#CODENVY_DOCKER_REGISTRY_AWS_REGISTRY1_SECRET__ACCESS__KEY=secret1


############################################################
#####                                                  #####
#####                OAUTH CONFIGURATION               #####
#####                                                  #####
#
# You can configure a 3rd party provider's oAuth, which will be used for your users when they
# create accounts and login. There are certain services within Codenvy, such as GitHub
# integration, where GitHub keys are required. oAuth must be configured for those services to work.
#
# Google
#CODENVY_GOOGLE_CLIENT_ID=your_google_client_id
#CODENVY_GOOGLE_SECRET=your_google_secret

# GitHub
#CODENVY_GITHUB_CLIENT_ID=your_github_client_id
#CODENVY_GITHUB_SECRET=your_github_secret

# BitBucket
#CODENVY_BITBUCKET_CLIENT_ID=your_bitbucket_client_ide
#CODENVY_BITBUCKET_SECRET=your_bitbucket_secret
#CODENVY_BITBUCKET_CONSUMER_KEY=your_bitbucket_consumer_key
#CODENVY_BITBUCKET_PRIVATE_KEY=your_bitbucket_private_key

# Microsoft
#CODENVY_MICROSOFT_CLIENT_ID==your_microsoft_client_ide
#CODENVY_MICROSOFT_SECRET=your_microsoft_secret

# WSO2
#CODENVY_WSO2_CLIENT_ID=your_wso2_client_ide
#CODENVY_WSO2_SECRET=your_wso2_secret

# Project Locker
#CODENVY_PROJECTLOCKER_CLIENT_ID=your_projectlocker_client_ide
#CODENVY_PROJECTLOCKER_SECRET=your_projectlocker_secret


###############################
# Bitbucket endpoint
#
# If you use enterprise Bitbucket Server instead of bitbucket.org, specify Bitbucket Server url.
#CODENVY_BITBUCKET_ENDPOINT=your_bitbucket_server_url

############################################################
#####                                                  #####
#####                    MAIL SERVER                   #####
#####                                                  #####
# 
# Codenvy uses email to notify admins and users of events in the system such as error reports
# invitations, or workspace unusual activity.
#
#CODENVY_MAIL_HOST=smtp.example.com
#CODENVY_MAIL_HOST_PORT=465
#CODENVY_MAIL_USE_SSL=true
#CODENVY_MAIL_TRANSPORT_PROTOCOL=smtp
#CODENVY_MAIL_SMTP_AUTH=true
#CODENVY_MAIL_SMTP_SOCKETFACTORY_CLASS=javax.net.ssl.SSLSocketFactory
#CODENVY_MAIL_SMTP_SOCKETFACTORY_FALLBACK=false
#CODENVY_MAIL_SMTP_SOCKETFACTORY_PORT=465
#CODENVY_MAIL_SMTP_AUTH_USERNAME=smtp_username
#CODENVY_MAIL_SMTP_AUTH_PASSWORD=smtp_password

#
# Logback reports configuraiton. Logbacks are reports that the product sends to adminstrators on
# its health.
#
#CODENVY_EMAIL_TO=admin@example.com
#CODENVY_EMAIL_FROM=noreply@codenvy.com
#CODENVY_EMAIL_SUBJECT=Codenvy -- codenvy.onprem error: %logger{20} - %m
#CODENVY_LOGBACK_SMTP_HOST=localhost
#CODENVY_LOGBACK_SMTP_PORT=25

############################################################
#####                                                  #####
#####                  LDAP INTEGRATION                #####
#####                                                  #####
#
# The `org` handler uses Codenvy's internal user management system. Set this to `ldap` to
# configure synchronization with and LDAP repository.
#
#CODENVY_AUTH_HANDLER_DEFAULT=org

# LDAP authentication
#CODENVY_LDAP_URL=
#CODENVY_LDAP_BASE_DN=
#CODENVY_LDAP_AUTH_USER_FILTER=
#CODENVY_LDAP_AUTH_AUTHENTICATION_TYPE=AD
#CODENVY_LDAP_AUTH_DN_FORMAT=
#CODENVY_LDAP_AUTH_USER_PASSWORD_ATTRIBUTE=NULL
#CODENVY_LDAP_AUTH_ALLOW_MULTIPLE_DNS=false
#CODENVY_LDAP_AUTH_SUBTREE_SEARCH=true

# LDAP connection
#CODENVY_LDAP_CONNECTION_PROVIDER=NULL
#CODENVY_LDAP_CONNECTION_BIND_DN=
#CODENVY_LDAP_CONNECTION_BIND_PASSWORD=
#CODENVY_LDAP_CONNECTION_USE_SSL=false
#CODENVY_LDAP_CONNECTION_USE_START_TLS=false
#CODENVY_LDAP_CONNECTION_POOL_MIN_SIZE=3
#CODENVY_LDAP_CONNECTION_POOL_MAX_SIZE=10
#CODENVY_LDAP_CONNECTION_POOL_VALIDATE_ON_CHECKOUT=false
#CODENVY_LDAP_CONNECTION_POOL_VALIDATE_ON_CHECKIN=false
#CODENVY_LDAP_CONNECTION_POOL_VALIDATE_PERIOD_MS=180000
#CODENVY_LDAP_CONNECTION_POOL_VALIDATE_PERIODICALLY=true
#CODENVY_LDAP_CONNECTION_POOL_FAIL_FAST=true
#CODENVY_LDAP_CONNECTION_POOL_IDLE_MS=5000
#CODENVY_LDAP_CONNECTION_POOL_PRUNE_MS=10000
#CODENVY_LDAP_CONNECTION_POOL_BLOCK_WAIT_MS=30000
#CODENVY_LDAP_CONNECTION_CONNECT_TIMEOUT_MS=30000
#CODENVY_LDAP_CONNECTION_RESPONSE_TIMEOUT_MS=120000
#CODENVY_LDAP_CONNECTION_SSL_TRUST_CERTIFICATES=NULL
#CODENVY_LDAP_CONNECTION_SSL_KEYSTORE_NAME=NULL
#CODENVY_LDAP_CONNECTION_SSL_KEYSTORE_PASSWORD=NULL
#CODENVY_LDAP_CONNECTION_SSL_KEYSTORE_TYPE=NULL
#CODENVY_LDAP_CONNECTION_SASL_REALM=NULL
#CODENVY_LDAP_CONNECTION_SASL_MECHANISM=NULL
#CODENVY_LDAP_CONNECTION_SASL_AUTHORIZATION_ID=NULL
#CODENVY_LDAP_CONNECTION_SASL_SECURITY_STRENGTH=NULL
#CODENVY_LDAP_CONNECTION_SASL_MUTUAL_AUTH=false
#CODENVY_LDAP_CONNECTION_SASL_QUALITY_OF_PROTECTION=NULL

# LDAP synchronization settings
#CODENVY_LDAP_SYNC_INITIAL_DELAY_MS=10000
#CODENVY_LDAP_SYNC_PERIOD_MS=-1
#CODENVY_LDAP_SYNC_PAGE_SIZE=1000
#CODENVY_LDAP_SYNC_PAGE_READ_TIMEOUT_MS=30000
#CODENVY_LDAP_SYNC_USER_ADDITIONAL_DN=NULL
#CODENVY_LDAP_SYNC_USER_FILTER=
#CODENVY_LDAP_SYNC_USER_ATTR_EMAIL=cn
#CODENVY_LDAP_SYNC_USER_ATTR_ID=objectGUID
#CODENVY_LDAP_SYNC_USER_ATTR_NAME=cn
#CODENVY_LDAP_SYNC_PROFILE_ATTRS=
#CODENVY_LDAP_SYNC_GROUP_ADDITIONAL_DN=NULL
#CODENVY_LDAP_SYNC_GROUP_FILTER=NULL
#CODENVY_LDAP_SYNC_GROUP_ATTR_MEMBERS=NULL

############################################################
#####                                                  #####
#####                       DATABASE                   #####
#####                                                  #####
#
# Codenvy ships with a postgres container. These properties define how the Codenvy
# server maintains its connection and access to that database. You can use an externally
# managed Postgres database by configuring these properties.
#
#CODENVY_PGSQL_PASS=codenvy
#CODENVY_PGSQL_USERNAME=pgcondenvy
#CODENVY_PGSQL_DATABASE_NAME=dbcodenvy
#CODENVY_PGSQL_LISTEN_ADDRESSES=*
#CODENVY_PGSQL_PORT=5432
#CODENVY_PGSQL_MAX_CONNECTIONS=200
#CODENVY_PGSQL_SHARED_BUFFERS=256MB
#CODENVY_PGSQL_WORK_MEM=6553kB
#CODENVY_PGSQL_MAINTENANCE_WORK_MEM=64MB
#CODENVY_PGSQL_WAL_BUFFERS=7864kB
#CODENVY_PGSQL_CHECKPOINT_SEGMENTS=32
#CODENVY_PGSQL_CHECKPOINT_COMPLETION_TARGET=0.9
#CODENVY_PGSQL_EFFECTIVE_CACHE_SIZE=768MB
#CODENVY_PGSQL_DEFAULT_STATISTICS_TARGET=100


############################################################
#####                                                  #####
#####                        JMX                       #####
#####                                                  #####
#
# JMX provides a management interface point to within the Codenvy container. JMX is not
# use by other containers such as haproxy or nginx. While Codenvy is running, grab the
# IP address of the codenvy container and you can connect to its embedded JMX server.
#
#CODENVY_JMX_USERNAME=admin
#CODENVY_JMX_PASSWORD=codenvy


############################################################
#####                                                  #####
#####                    DOCKER                        #####
#####                                                  #####
# IP Address
#     The IP address of the Docker daemon that is running on your host. We do a self-discvoery
#     to set this. You can combine this with values of DOCKER_HOST to change communications
#     from socket to TCP.
#CODENVY_DOCKER_IP=172.17.0.1

# Docker Swarm
#     A comma separated list of <ip>:<port> combinations which specifies the location
#     of other physical hosts which Codenvy is managing as part of its workspace cluster.
#     Each of the remote nodes run swarm. The `codenvy add-node` command runs the process of
#     installing our software on each node and updating this configuration parameter with
#     an expanded list of nodes. You should not have to configure this as we
#     manage it with the CLI.
#CODENVY_SWARM_NODES=172.17.0.1:2375
